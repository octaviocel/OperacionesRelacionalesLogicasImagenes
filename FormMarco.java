
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author DELL
 */
public class FormMarco extends javax.swing.JFrame {

    private BufferedImage imagen;
    private String origen;
    private ImageIcon icono;

    public FormMarco() {
        initComponents();
        setLocationRelativeTo(null);
        jDialog1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jFileChooser1 = new javax.swing.JFileChooser();
        jDialog1 = new javax.swing.JDialog();
        pnlBonotes = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jButton1.setText("Aplicar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Operador inverso", "Operador umbral", "Operador intervalo de umbral binario", "Operador intervalo de umbral binario inverso", "Operador umbral de la escala de grises", "Operador umbral de la escala de grises inverso", "Operador de extensi贸n", "Operador reducci贸n del nivel de gris", "Operador AND", "Operador OR", "Adiccion de Imagen", "Sustraccion de imagen" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton3.setText("Original");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBonotesLayout = new javax.swing.GroupLayout(pnlBonotes);
        pnlBonotes.setLayout(pnlBonotesLayout);
        pnlBonotesLayout.setHorizontalGroup(
            pnlBonotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBonotesLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        pnlBonotesLayout.setVerticalGroup(
            pnlBonotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBonotesLayout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addGroup(pnlBonotesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addGap(38, 38, 38))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, 588, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Indivisa Text Sans", 1, 14)); // NOI18N
        jLabel1.setText("Imagen");

        jButton2.setText("Importar Imagen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(178, 178, 178)
                .addComponent(jButton2)
                .addGap(195, 195, 195))
            .addGroup(layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(pnlBonotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)))
                .addContainerGap(73, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addComponent(pnlBonotes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Operador inverso    0
        //Operador umbral     1
        //Operador intervalo de umbral binario    2
        //Operador intervalo de umbral binario inverso  3
        //Operador umbral de la escala de grises   4
        //Operador umbral de la escala de grises inverso  5
        //Operador de extensi贸n    6
        //Operador reducci贸n del nivel de gris  7
        //Operador AND  8 
        //Operador OR   9
        //Adiccion      10
        //Sustraccion    11
        int seleccion = jComboBox1.getSelectedIndex();
        BufferedImage nuevo;
        switch (seleccion) {
            case 0:
                nuevo = imagen;
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Integer rgb = imagen.getRGB(i, j);
                        Color im = new Color(rgb);
                        Color color = new Color(255 - im.getRed(), 255 - im.getGreen(), 255 - im.getBlue());

                        nuevo.setRGB(i, j, color.getRGB());
                    }
                }
                this.lblImage.setIcon(new ImageIcon(nuevo));
                break;
            case 1:
                try {
                nuevo = imagen;
                int umbral = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral rango(1-254)"));
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Integer rgb = imagen.getRGB(i, j);
                        Color im = new Color(rgb);
                        if (im.getRed() <= umbral) {
                            Color color = new Color(0, 0, 0);
                            nuevo.setRGB(i, j, color.getRGB());
                        } else {
                            Color color1 = new Color(255, 255, 255);
                            nuevo.setRGB(i, j, color1.getRGB());
                        }

                    }
                }
                this.lblImage.setIcon(new ImageIcon(nuevo));
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error poque no ingreso un numero");
            }
            break;
            case 2:
                try {
                nuevo = imagen;
                int umbral = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral1 rango(1-254)"));
                int umbral1 = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral2 rango(" + umbral + "-255)"));
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Integer rgb = imagen.getRGB(i, j);
                        Color im = new Color(rgb);
                        if (im.getRed() <= umbral || im.getRed() >= umbral1) {
                            Color color = new Color(255, 255, 255);
                            nuevo.setRGB(i, j, color.getRGB());
                        } else {
                            Color color1 = new Color(0, 0, 0);
                            nuevo.setRGB(i, j, color1.getRGB());
                        }

                    }
                }
                this.lblImage.setIcon(new ImageIcon(nuevo));
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error poque no ingreso un numero");
            }
            break;
            case 3:
                try {
                nuevo = imagen;
                int umbral = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral1 rango(1-254)"));
                int umbral1 = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral2 rango(" + umbral + "-255)"));
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Integer rgb = imagen.getRGB(i, j);
                        Color im = new Color(rgb);
                        if (im.getRed() <= umbral || im.getRed() >= umbral1) {
                            Color color = new Color(0, 0, 0);
                            nuevo.setRGB(i, j, color.getRGB());
                        } else {
                            Color color1 = new Color(255, 255, 255);
                            nuevo.setRGB(i, j, color1.getRGB());
                        }

                    }
                }
                this.lblImage.setIcon(new ImageIcon(nuevo));
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error poque no ingreso un numero");
            }
            break;
            case 4:
                try {
                nuevo = imagen;
                int umbral = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral1 rango(1-254)"));
                int umbral1 = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral2 rango(" + umbral + "-255)"));
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Integer rgb = imagen.getRGB(i, j);
                        Color im = new Color(rgb);
                        if (im.getRed() <= umbral || im.getRed() >= umbral1) {
                            Color color = new Color(255, 255, 255);
                            nuevo.setRGB(i, j, color.getRGB());
                        } else {
                            nuevo.setRGB(i, j, im.getRGB());
                        }

                    }
                }
                this.lblImage.setIcon(new ImageIcon(nuevo));
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error poque no ingreso un numero");
            }
            break;
            case 5:
                try {
                nuevo = imagen;
                int umbral = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral1 rango(1-254)"));
                int umbral1 = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral2 rango(" + umbral + "-255)"));
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Integer rgb = imagen.getRGB(i, j);
                        Color im = new Color(rgb);
                        if (im.getRed() <= umbral || im.getRed() >= umbral1) {
                            Color color = new Color(255, 255, 255);
                            nuevo.setRGB(i, j, color.getRGB());
                        } else {
                            //Color color1 = new Color(255 - im.getRed(), 255 - im.getGreen(), 255 - im.getBlue());
                            nuevo.setRGB(i, j, 255 - im.getRGB());
                        }

                    }
                }
                this.lblImage.setIcon(new ImageIcon(nuevo));
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error poque no ingreso un numero");
            }
            break;
            case 6:
                try {
                nuevo = imagen;
                int umbral = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral1 rango(1-254)"));
                int umbral1 = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral2 rango(" + umbral + "-255)"));
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Integer rgb = imagen.getRGB(i, j);
                        Color im = new Color(rgb);
                        if (im.getRed() <= umbral || im.getRed() >= umbral1) {
                            Color color = new Color(0, 0, 0);
                            nuevo.setRGB(i, j, color.getRGB());
                        } else {
                            Color color1 = new Color((im.getRed() - umbral) * (255 / (umbral1 - umbral)), (im.getGreen() - umbral) * (255 / (umbral1 - umbral)), (im.getBlue() - umbral) * (255 / (umbral1 - umbral)));
                            nuevo.setRGB(i, j, color1.getRGB());
                        }

                    }
                }
                this.lblImage.setIcon(new ImageIcon(nuevo));
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error poque no ingreso un numero");
            }
            break;
            case 7:
                String[] bits = {"1 bit", "2 bits", "4 bits", "8 bits"};
                JComboBox combito = new JComboBox(bits);
                JButton btn = new JButton("Aceptar");
                btn.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        try {
                            int d = combito.getSelectedIndex(), des = 1;
                            jDialog1.setVisible(false);
                            if (d == 0) {
                                des = 1;
                            } else if (d == 1) {
                                des = 2;
                            } else if (d == 2) {
                                des = 4;
                            } else {
                                des = 8;
                            }
                            profundidad(des);
                        } catch (IOException ex) {
                            JOptionPane.showMessageDialog(FormMarco.this, "Error no selecciono nada");
                        }
                    }
                });
                jDialog1 = new JDialog(this, true);
                jDialog1.setLocationRelativeTo(null);
                jDialog1.setSize(330, 120);
                JLabel lb = new JLabel("Dame una opcion para darle escal de grises");
                jDialog1.setLayout(new BorderLayout());
                jDialog1.add(lb, BorderLayout.NORTH);
                jDialog1.add(combito, BorderLayout.CENTER);
                jDialog1.add(btn, BorderLayout.SOUTH);
                jDialog1.setVisible(true);
                break;
            case 8:
                try {
                nuevo = imagen;
                int umbral = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral rango(1-254)"));
                int operador = Integer.parseInt(JOptionPane.showInputDialog("Dame el operador logico 1 o 0"));
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Integer rgb = imagen.getRGB(i, j);
                        Color im = new Color(rgb);
                        if (im.getRed() <= umbral) {
                            int interno = 0;
                            int color = interno * operador;
                            Color colorcin = colorcito(color);
                            nuevo.setRGB(i, j, colorcin.getRGB());
                        } else {
                            int interno = 1;
                            int color = interno * operador;
                            Color colorcin = colorcito(color);
                            nuevo.setRGB(i, j, colorcin.getRGB());
                        }

                    }
                }
                this.lblImage.setIcon(new ImageIcon(nuevo));
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error poque no ingreso un numero");
            }
            break;
            case 9:
                try {
                nuevo = imagen;
                int umbral = Integer.parseInt(JOptionPane.showInputDialog("Dame el umbral rango(1-254)"));
                int operador = Integer.parseInt(JOptionPane.showInputDialog("Dame el operador logico 1 o 0"));
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Integer rgb = imagen.getRGB(i, j);
                        Color im = new Color(rgb);
                        if (im.getRed() <= umbral) {
                            int interno = 0;
                            int color = interno + operador;
                            Color colorcin = colorcito(color);
                            nuevo.setRGB(i, j, colorcin.getRGB());
                        } else {
                            int interno = 1;
                            int color = interno + operador;
                            if (color == 2) {
                                color = 1;
                            }
                            Color colorcin = colorcito(color);
                            nuevo.setRGB(i, j, colorcin.getRGB());
                        }

                    }
                }
                this.lblImage.setIcon(new ImageIcon(nuevo));
            } catch (HeadlessException | NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Error poque no ingreso un numero");
            }
            break;

            case 10:
                nuevo = imagen;
                JFileChooser fi = new JFileChooser();
                fi.showOpenDialog(this);

                File abre = fi.getSelectedFile();

                if (abre != null) {
                    String t = abre.getPath();
                    ImageIcon icon = new ImageIcon(new ImageIcon(t).getImage().getScaledInstance(588, 338, Image.SCALE_DEFAULT));
                    Image image = icon.getImage();
                    BufferedImage temporal = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
                    Graphics2D bGr = temporal.createGraphics();
                    bGr.drawImage(image, 0, 0, null);
                    bGr.dispose();
                    for (int i = 0; i < imagen.getWidth(); i++) {
                        for (int j = 0; j < imagen.getHeight(); j++) {
                            Integer rgb = imagen.getRGB(i, j);
                            Integer rgb2 = temporal.getRGB(i, j);
                            Color im1 = new Color(rgb);
                            Color im2 = new Color(rgb2);
                            Color colorcin = new Color(((im1.getRed() + im2.getRed()) / 2), ((im1.getGreen() + im2.getGreen()) / 2), ((im1.getBlue() + im2.getBlue()) / 2));

                            nuevo.setRGB(i, j, colorcin.getRGB());
                            //nuevo.setRGB(i, j, ((im1.getRGB() + im2.getRGB())/2));
                        }
                    }
                    this.lblImage.setIcon(new ImageIcon(nuevo));
                }
                break;

            case 11:
                nuevo = imagen;
                JFileChooser fi2 = new JFileChooser();
                fi2.showOpenDialog(this);

                File abre1 = fi2.getSelectedFile();

                if (abre1 != null) {
                    String t = abre1.getPath();
                    ImageIcon icon = new ImageIcon(new ImageIcon(t).getImage().getScaledInstance(588, 338, Image.SCALE_DEFAULT));
                    Image image = icon.getImage();
                    BufferedImage temporal = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
                    Graphics2D bGr = temporal.createGraphics();
                    bGr.drawImage(image, 0, 0, null);
                    bGr.dispose();
                    for (int i = 0; i < imagen.getWidth(); i++) {
                        for (int j = 0; j < imagen.getHeight(); j++) {
                            Integer rgb = imagen.getRGB(i, j);
                            Integer rgb2 = temporal.getRGB(i, j);
                            Color im1 = new Color(rgb);
                            Color im2 = new Color(rgb2);
                            int rojo=((im1.getRed() - im2.getRed()) * 2);
                            if(rojo>255){
                                rojo=255;
                            }
                            if(rojo<0){
                                rojo=0;
                            }
                            int verde=((im1.getGreen() - im2.getGreen()) * 2);
                            if(verde>255){
                                verde=255;
                            }
                            if(verde<0){
                                verde=0;
                            }
                            int azul=((im1.getBlue() - im2.getBlue()) * 2);
                            if(azul>255){
                                azul=255;
                            }
                            if(azul<0){
                                azul=0;
                            }
                            Color colorcin = new Color(rojo,verde ,azul );

                            nuevo.setRGB(i, j, colorcin.getRGB());
                            //nuevo.setRGB(i, j, ((im1.getRGB() + im2.getRGB())/2));
                        }
                    }
                    this.lblImage.setIcon(new ImageIcon(nuevo));
                }
                break;
            default:
                break;
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private Color colorcito(int o) {
        if (o == 0) {
            Color colorcito = new Color(0, 0, 0);
            return colorcito;
        } else {
            Color colorcito = new Color(255, 255, 255);
            return colorcito;
        }

    }

    private void profundidad(Integer bits) throws IOException {
        BufferedImage nuevo = imagen;
        switch (bits) {
            case 1:
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Color color = new Color(imagen.getRGB(i, j));
                        if (color.getBlue() <= 128) {
                            Color colorcito = new Color(0, 0, 0);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else {
                            Color colorcito = new Color(255, 255, 255);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        }
                    }
                }

                break;
            case 2:
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Color color = new Color(imagen.getRGB(i, j));
                        if (color.getBlue() <= 63) {
                            Color colorcito = new Color(0, 0, 0);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 64) && (color.getBlue() <= 127)) {
                            Color colorcito = new Color(64, 64, 64);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 128) && (color.getBlue() <= 191)) {
                            Color colorcito = new Color(128, 128, 128);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else {
                            Color colorcito = new Color(192, 192, 192);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        }

                    }
                }

                break;
            case 4:
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Color color = new Color(imagen.getRGB(i, j));
                        if (color.getBlue() <= 31) {
                            Color colorcito = new Color(0, 0, 0);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 32) && (color.getBlue() <= 63)) {
                            Color colorcito = new Color(64, 64, 64);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 64) && (color.getBlue() <= 95)) {
                            Color colorcito = new Color(64, 64, 64);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 96) && (color.getBlue() <= 127)) {
                            Color colorcito = new Color(96, 96, 96);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 128) && (color.getBlue() <= 159)) {
                            Color colorcito = new Color(128, 128, 128);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 160) && (color.getBlue() <= 191)) {
                            Color colorcito = new Color(160, 160, 160);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 192) && (color.getBlue() <= 223)) {
                            Color colorcito = new Color(192, 192, 192);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else {
                            Color colorcito = new Color(224, 224, 224);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        }
                    }
                }
                break;
            case 8:
                for (int i = 0; i < imagen.getWidth(); i++) {
                    for (int j = 0; j < imagen.getHeight(); j++) {
                        Color color = new Color(imagen.getRGB(i, j));
                        if (color.getBlue() <= 15) {
                            Color colorcito = new Color(0, 0, 0);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 16) && (color.getBlue() <= 31)) {
                            Color colorcito = new Color(16, 16, 16);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 32) && (color.getBlue() <= 47)) {
                            Color colorcito = new Color(32, 32, 32);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 48) && (color.getBlue() <= 63)) {
                            Color colorcito = new Color(48, 48, 48);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 64) && (color.getBlue() <= 79)) {
                            Color colorcito = new Color(64, 64, 64);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 80) && (color.getBlue() <= 95)) {
                            Color colorcito = new Color(80, 80, 80);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 96) && (color.getBlue() <= 111)) {
                            Color colorcito = new Color(96, 96, 96);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 112) && (color.getBlue() <= 127)) {
                            Color colorcito = new Color(112, 112, 112);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 128) && (color.getBlue() <= 143)) {
                            Color colorcito = new Color(128, 128, 128);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 144) && (color.getBlue() <= 159)) {
                            Color colorcito = new Color(144, 144, 144);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 160) && (color.getBlue() <= 175)) {
                            Color colorcito = new Color(160, 160, 160);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 176) && (color.getBlue() <= 191)) {
                            Color colorcito = new Color(176, 176, 176);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 192) && (color.getBlue() <= 207)) {
                            Color colorcito = new Color(192, 192, 192);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 208) && (color.getBlue() <= 223)) {
                            Color colorcito = new Color(208, 208, 208);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else if ((color.getBlue() >= 224) && (color.getBlue() <= 239)) {
                            Color colorcito = new Color(224, 224, 224);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        } else {
                            Color colorcito = new Color(240, 240, 240);
                            nuevo.setRGB(i, j, colorcito.getRGB());
                        }
                    }
                }
                break;
        }
        this.lblImage.setIcon(new ImageIcon(nuevo));
    }

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        jFileChooser1.showOpenDialog(this);

        File abre = jFileChooser1.getSelectedFile();

        if (abre != null) {
            origen = abre.getPath();

            ImageIcon icon = new ImageIcon(new ImageIcon(origen).getImage().getScaledInstance(588, 338, Image.SCALE_DEFAULT));
            this.icono = icon;
            Image image = icon.getImage();
            this.imagen = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
            Graphics2D bGr = imagen.createGraphics();
            bGr.drawImage(image, 0, 0, null);
            bGr.dispose();
            this.lblImage.setIcon(icon);

        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Image temp = icono.getImage();
        this.imagen = new BufferedImage(temp.getWidth(null), temp.getHeight(null), BufferedImage.TYPE_INT_ARGB);
        Graphics2D bGr = imagen.createGraphics();
        bGr.drawImage(temp, 0, 0, null);
        bGr.dispose();
        this.lblImage.setIcon(icono);
    }//GEN-LAST:event_jButton3ActionPerformed

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormMarco().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel lblImage;
    private javax.swing.JPanel pnlBonotes;
    // End of variables declaration//GEN-END:variables
}
